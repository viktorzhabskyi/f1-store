version: '3.8'

services:
  # Backend Redis service
  backend_redis:
    image: 638693734667.dkr.ecr.us-east-1.amazonaws.com/f1-store:backend_redis-latest
    container_name: backend_redis
    environment:
      SECRET_KEY: "SECRET_KEY"
      CORS_ALLOWED_ORIGINS: "http://localhost:8001,http://127.0.0.1:8001,http://0.0.0.0:8001,http://localhost,http://127.0.0.1,http://0.0.0.0"
      DEBUG: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - postgres
    networks:
      - backend_network
    ports:
      - "8001:8000"

  backend_rds:
    image: 638693734667.dkr.ecr.us-east-1.amazonaws.com/f1-store:backend_rds-latest
    container_name: backend_rds
    depends_on:
      - redis
    environment:
      CORS_ALLOWED_ORIGINS: "http://localhost:8000,http://127.0.0.1:8000,http://0.0.0.0:8000,http://localhost,http://127.0.0.1,http://0.0.0.0"
      DB_NAME: postgres
      DB_USER: root
      DB_PASSWORD: 123
      DB_HOST: postgres
      DB_PORT: 5432
    networks:
      - backend_network
    ports:
      - "8000:8000"

#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    volumes:
#      - ../frontend/index.html:/usr/share/nginx/html/index.html
#    depends_on:
#      - backend_redis
#      - backend_rds
#    ports:
#      - "80:80"
#    networks:
#      - backend_network

  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend_network

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
    ports:
      - "5432:5432"
    networks:
      - backend_network


networks:
  backend_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
